AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Integradora9A

  Sample SAM Template for Integradora9A

Globals:
  Function:
    Timeout: 15
    MemorySize: 128
  Api:
    Cors:
      AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"

Resources:

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: RDSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds:DescribeDBInstances
                  - rds:Connect
                Resource: "*"
        - PolicyName: SecretsManagerAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "secretsmanager:GetSecretValue"
                Resource: 'arn:aws:secretsmanager:us-east-1:*'
        - PolicyName: CognitoAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminInitiateAuth
                  - cognito-idp:AdminRespondToAuthChallenge
                  - cognito-idp:AdminSetUserPassword
                  - cognito-idp:AdminCreateUser
                  - cognito-idp:AdminDeleteUser
                  - cognito-idp:AdminUpdateUserAttributes
                  - cognito-idp:AdminListGroupsForUser
                  - cognito-idp:AdminAddUserToGroup
                  - cognito-idp:AdminRemoveUserFromGroup
                  - cognito-idp:AdminGetUser
                  - cognito-idp:AdminGetUserAttributeVerificationCode
                  - cognito-idp:AdminConfirmSignUp
                  - cognito-idp:AdminForgetDevice
                  - cognito-idp:AdminConfirmDevice
                  - cognito-idp:AdminUpdateDeviceStatus
                  - cognito-idp:AdminEnableUser
                  - cognito-idp:AdminDisableUser
                  - cognito-idp:AdminResetUserPassword
                  - cognito-idp:AdminSetUserSettings
                  - cognito-idp:AdminUpdateAuthEventFeedback
                  - cognito-idp:AdminUserGlobalSignOut
                Resource: 'arn:aws:cognito-idp:us-east-1:*:*'

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: CognitoUserPool
      UsernameAttributes: []
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: email
          Required: True
          Mutable: True
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: True
          RequireLowercase: True
          RequireNumbers: True
          RequireSymbols: True

  AdminUserGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        GroupName: admin
        UserPoolId: !Ref CognitoUserPool
        Precedence: 1

  ClientUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: usuario
      UserPoolId: !Ref CognitoUserPool
      Precedence: 2



  AdminsApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: AdminsApi
      StageName: Prod
      Cors:
        AllowOrigin: "'*'"
        AllowHeaders: "'*'"
        AllowMethods: "'OPTIONS,POST,GET,PUT,DELETE'"
      Auth:
         Authorizers:
            AdminsAuthorizer:
              UserPoolArn: !GetAtt CognitoUserPool.Arn



  AdminsAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: AdminsAuthorizer
      RestApiId: !Ref AdminsApi
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      ProviderARNs:
          - !GetAtt CognitoUserPool.Arn


  CreateAdminFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: lambdas/admin_management/create_admin/
      Handler: app.lambda_handler
      Runtime: python3.12
      Timeout: 60
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        CreateAdmin:
          Type: Api
          Properties:
            RestApiId: !Ref AdminsApi
            Path: /create_admin
            Method: post
            Auth:
              Authorizer: !Ref AdminsAuthorizer
      Environment:
        Variables:
          RDS_HOST: "integradoramelomix.c92quiiw2jmr.us-east-2.rds.amazonaws.com"
          RDS_USER: "admin"
          RDS_PASSWORD: "admin123"
          RDS_DB: "melonmix"

  CreateAdminFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${CreateAdminFunction}"
      RetentionInDays: 7




Outputs:
  CreateAdminApiUrl:
    Description: "API Gateway endpoint URL for Create Admin Function"
    Value: !Sub "https://${AdminsApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/create_admin/"

  CreateAdminFunctionArn:
    Description: "Create Admin Lambda Function ARN"
    Value: !GetAtt CreateAdminFunction.Arn

  LambdaExecutionRoleArn:
    Description: "Lambda Execution Role ARN"
    Value: !GetAtt LambdaExecutionRole.Arn
